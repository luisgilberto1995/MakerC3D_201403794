package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String id, entero, decimal, cadena, caracter;
terminal TokenC3D mas, menos, dividido, por, pot, para, parc, and, or, menor, mayor, menorigual, mayorigual, igualigual, noigual, not;
nonterminal NodoC3D inicial, expresion, B, OPREL, J;

precedence left mas, menos;
precedence left por, dividido; 
precedence right pot; 
precedence left or;
precedence left and;

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} J;

J ::= B:exp
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("\n//Verdadero:[" + exp.getEtqV()+"]");
                        ControlC3D.agregarC3D("\n//Falso:[" + exp.getEtqF()+"]");
                    :}
      | expresion:exp
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                    :};
expresion   ::= expresion:izq mas expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq menos expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq por expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq dividido expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq pot expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   menos expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   para expresion:exp parc   
                    {: RESULT = exp; :}
            |   id:idd           
                    {: RESULT = new NodoC3D(idd); :}
            |   entero:enterof   
                    {: RESULT = new NodoC3D(enterof); :}
            |   decimal:decimall 
                    {: RESULT = new NodoC3D(decimall); :}
            ;


OPREL ::= mayor {: RESULT = new NodoC3D(">"); :}
          | menor {: RESULT = new NodoC3D("<"); :}
          | mayorigual {: RESULT = new NodoC3D(">="); :}
          | menorigual {: RESULT = new NodoC3D("<="); :}
          | igualigual {: RESULT = new NodoC3D("=="); :}
          | noigual {: RESULT = new NodoC3D("!="); :};

B ::= B:izq and {: ControlC3D.agregarC3D(izq.getEtqV()+"\n"); :} B:der
                    {: 
                        ControlC3D.agregarC3D(der.getEtqV());

                        RESULT = new NodoC3D("");
                        RESULT.setEtiquetas(der.getEtqV(), izq.getEtqF()+der.getEtqF()); 
                    :}
        | B:izq  or {: ControlC3D.agregarC3D(izq.getEtqF()+"\n"); :} B:der 
                    {: 
                        ControlC3D.agregarC3D(der.getEtqV());

                        RESULT = new NodoC3D("");
                        RESULT.setEtiquetas(izq.getEtqV()+der.getEtqV(), der.getEtqF());
                    :}
        | not B:exp
                    {: 
                        RESULT = new NodoC3D(exp.getCad());
                        RESULT.setEtiquetas(exp.getEtqF(), exp.getEtqV());
                    :}
        | expresion:izq OPREL:oprel expresion:der
                    {: 
                        String etqV = ControlC3D.generaEtq();
                        String etqF = ControlC3D.generaEtq();
                        
                        String cad = "if "+izq.getCad()+ " " + oprel.getCad()+" " + der.getCad() + " then goto " + etqV + "\ngoto " + etqF + "\n";

                        ControlC3D.agregarC3D(cad);
                        
                        RESULT = new NodoC3D(""); 
                        RESULT.setEtiquetas(etqV+":", etqF+":");
                    :}
        | para B:b parc 
                    {:
                        RESULT = b;
                    :};